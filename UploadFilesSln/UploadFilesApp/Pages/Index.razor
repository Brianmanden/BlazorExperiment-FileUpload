@page "/"
@using UploadFilesApp.Data;
@using UploadFilesLibrary.Interfaces;
@inject IConfiguration config
@inject ISqlDataAccess sql

<PageTitle>Upload Demo App</PageTitle>

<h1>File Upload Experiment</h1>

<EditForm Model="newCustomer" OnValidSubmit="SubmitForm">
    <label for="firstName" class="fw-bold">First Name:</label>
    <InputText id="firstName" class="form-control mb-4" @bind-Value="newCustomer.FirstName" />

    <label for="lasstName" class="fw-bold">Last Name:</label>
    <InputText id="lasstName" class="form-control mb-4" @bind-Value="newCustomer.LastName" />

    <label for="profilePicture" class="fw-bold">Profile Picture:</label>
    <InputFile OnChange="@LoadFiles" class="form-control mb-4" accept=".png, .jpg, .jpeg, .gif" />

    <button class="btn btn-primary mb-4" type="submit">Create Customer</button>
</EditForm>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Profile Picture</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>
                        @if (string.IsNullOrWhiteSpace(customer.FileName) == false)
                        {
                            <img src="@CreateWebPath(customer.FileName)" title="Profile Picture - @customer.FirstName @customer.LastName" width="150" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string userName = "loggedInUserName";
    // Maximum filesize is set to 3 Megabyte
    private long maxFileSize = 3 * 1024 * 1024;
    private List<string> errors = new();
    private CustomerModel newCustomer = new();
    private IBrowserFile? file;
    private List<CustomerModel>? customers;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    private async Task LoadCustomers()
    {
        customers = await sql.LoadData<CustomerModel>(
            "dbo.spCustomer_GetAll",
            "Default",
            null
        );
    }

    private async Task SubmitForm()
    {
        errors.Clear();

        try
        {
            string relativePath = await CaptureFile();
            newCustomer.FileName = relativePath;

            await sql.SaveData("dbo.spCustomer_Insert", "Default", newCustomer);

            newCustomer = new();
            file = null;
            errors.Clear();

            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name)
            );

            string path = Path.Combine(
                @config.GetValue<string>("FileStorage")!,
                userName,
                newFileName
            );

            string relativePath = Path.Combine(userName, newFileName);

            Directory.CreateDirectory(Path.Combine(@config.GetValue<string>("FileStorage")!, userName));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
    }
}